# -*- coding: utf-8 -*-
"""simpleNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mfNaeeUK4XcTla8DzvcYTfHv2w6mbl9U
"""

import torch
from torch import nn, optim
import numpy as np
import matplotlib.pyplot as plt


class SimpleNN(nn.Module):
    def __init__(self):
        super(SimpleNN, self).__init__()
        self.l1 = nn.Linear(1, 1)

    def forward(self, x):
        x = self.l1(x)
        return x

x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], dtype=np.float32).reshape(-1, 1)
y = np.array([100, 150, 200, 250, 300, 350, 400, 450, 500, 550], dtype=np.float32).reshape(-1, 1)

x_tensor = torch.from_numpy(x)
y_tensor = torch.from_numpy(y)


model = SimpleNN()
criterion = nn.MSELoss()
optimizer = optim.SGD(model.parameters(), lr=0.001)
num_epochs = 200
for epoch in range(num_epochs):
    outputs = model(x_tensor)
    loss = criterion(outputs, y_tensor)


    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    if (epoch+1) % 10 == 0:
        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')


# Make predictions
predicted = model(x_tensor).detach().numpy()

plt.plot(x, y, 'ro', label='Original data')
plt.plot(x, predicted, 'b', label='Fitted line')

plt.legend()
plt.show()

